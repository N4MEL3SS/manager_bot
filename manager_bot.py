from datetime import datetime
import logging

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
import pytz

from database import db
from notifications import notification_manager

from config import config


logger = logging.getLogger(__name__)

manager_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ManagerStates(StatesGroup):
    waiting_for_manager_chat_id = State()
    waiting_for_manager_nickname = State()
    waiting_for_ticket_answer = State()


def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé´ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤", callback_data="show_tickets")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="manage_managers")],
            [InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="show_help")],
        ]
    )


def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="add_manager")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="remove_manager")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="list_managers")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )


def get_ticket_keyboard(ticket_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{ticket_id}")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", callback_data=f"close_{ticket_id}")],
        ]
    )


def is_admin(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return chat_id in config.ADMIN_CHAT_IDS


@manager_router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    if not await db.is_manager(message.chat.id) and not is_admin(message.chat.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    welcome_text = """
üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ üé´ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
‚Ä¢ üÜò –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üö® –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤!
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


@manager_router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback.message.edit_text("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", reply_markup=get_main_keyboard())
    await callback.answer()


@manager_router.callback_query(F.data == "show_tickets")
async def show_tickets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤."""
    if not await db.is_manager(callback.message.chat.id) and not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        tickets = await db.get_pending_tickets()

        if not tickets:
            await callback.message.edit_text(
                "üéâ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤!", reply_markup=get_main_keyboard()
            )
            await callback.answer()
            return

        text = f"üìã –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã ({len(tickets)}):\n\n"
        await callback.message.edit_text(text, reply_markup=get_main_keyboard())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for ticket in tickets:
            ticket_text = f"""
üë§ –ö–ª–∏–µ–Ω—Ç: {ticket.client_nickname}
üÜî ID —Ç–∏–∫–µ—Ç–∞: #{ticket.id}
‚è∞ –í—Ä–µ–º—è: {ticket.created_at.strftime("%d.%m.%Y %H:%M")}
üí¨ –í–æ–ø—Ä–æ—Å:
{ticket.question[:500]}{"..." if len(ticket.question) > 500 else ""}
            """

            await callback.message.answer(ticket_text, reply_markup=get_ticket_keyboard(ticket.id))

        await callback.answer()

    except Exception as e:
        logger.error(f"Error showing tickets: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤")


@manager_router.callback_query(F.data == "show_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not await db.is_manager(callback.message.chat.id) and not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        tickets_stats = await db.get_tickets_count()
        managers = await db.get_all_managers()

        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´

üìà –¢–∏–∫–µ—Ç—ã:
   ‚Ä¢ –í—Å–µ–≥–æ: {tickets_stats["total"]}
   ‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {tickets_stats["pending"]}
   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {tickets_stats["answered"]}

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(managers)}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now(pytz.timezone(config.TIMEZONE)).strftime("%H:%M %d.%m.%Y")}
        """

        await callback.message.edit_text(stats_text, reply_markup=get_main_keyboard())
        await callback.answer()

    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@manager_router.callback_query(F.data == "manage_managers")
async def manage_managers(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    managers_text = """
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    """
    await callback.message.edit_text(managers_text, reply_markup=get_admin_keyboard())
    await callback.answer()


@manager_router.callback_query(F.data == "add_manager")
async def add_manager_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    if not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await state.set_state(ManagerStates.waiting_for_manager_chat_id)
    await callback.message.edit_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n"
        "Chat_id –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç—É @userinfobot",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_manager")]]
        ),
    )
    await callback.answer()


@manager_router.callback_query(F.data == "cancel_add_manager")
async def cancel_add_manager(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard())
    await callback.answer()


@manager_router.message(ManagerStates.waiting_for_manager_chat_id)
async def process_manager_chat_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    try:
        chat_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        existing_manager = await db.get_manager_by_chat_id(chat_id)
        if existing_manager and existing_manager.is_active:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", reply_markup=get_admin_keyboard()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
        await state.update_data(manager_chat_id=chat_id)
        await state.set_state(ManagerStates.waiting_for_manager_nickname)

        await message.answer(
            "‚úÖ Chat_id –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_manager")]]
            ),
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π chat_id:")


@manager_router.message(ManagerStates.waiting_for_manager_nickname)
async def process_manager_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    nickname = message.text.strip()

    if len(nickname) < 2 or len(nickname) > 100:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π chat_id
    data = await state.get_data()
    chat_id = data["manager_chat_id"]

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –±–∞–∑—É
        manager = await db.add_manager(chat_id, nickname)

        success_text = f"""
‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!

üë§ –ò–º—è: {manager.nickname}
üÜî Chat ID: {manager.chat_id}
üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {manager.created_at.strftime("%d.%m.%Y %H:%M")}

–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        """

        await message.answer(success_text, reply_markup=get_admin_keyboard())

        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        try:
            manager_bot = Bot(token=config.MANAGER_BOT_TOKEN)
            await manager_bot.send_message(
                chat_id=chat_id,
                text="üéâ –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            )
            await manager_bot.session.close()
        except Exception as e:
            logger.warning(f"Could not notify new manager: {e}")

    except Exception as e:
        logger.error(f"Error adding manager: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=get_admin_keyboard())

    await state.clear()


@manager_router.callback_query(F.data == "list_managers")
async def list_managers(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""
    if not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        managers = await db.get_all_managers()

        if not managers:
            await callback.message.edit_text("üì≠ –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=get_admin_keyboard())
            await callback.answer()
            return

        managers_text = "üë• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n\n"

        for i, manager in enumerate(managers, 1):
            stats = await db.get_manager_stats(manager.chat_id)
            last_activity = (
                stats["last_activity"].strftime("%d.%m.%Y %H:%M") if stats["last_activity"] else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )

            managers_text += f"{i}. üë§ {manager.nickname}\n"
            managers_text += f"   üÜî ID: {manager.chat_id}\n"
            managers_text += f"   üìä –û—Ç–≤–µ—á–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['total_answered']}\n"
            managers_text += f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
            managers_text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {manager.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

        await callback.message.edit_text(managers_text, reply_markup=get_admin_keyboard())
        await callback.answer()

    except Exception as e:
        logger.error(f"Error listing managers: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")


@manager_router.callback_query(F.data == "remove_manager")
async def remove_manager_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    if not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        managers = await db.get_all_managers()

        if not managers:
            await callback.message.edit_text(
                "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_admin_keyboard()
            )
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = []
        for manager in managers:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f"üóëÔ∏è {manager.nickname} (ID: {manager.chat_id})",
                        callback_data=f"remove_manager_{manager.chat_id}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_managers")])

        await callback.message.edit_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error starting manager removal: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")


@manager_router.callback_query(F.data.startswith("remove_manager_"))
async def remove_manager_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    if not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    manager_chat_id = int(callback.data.split("_")[2])
    manager = await db.get_manager_by_chat_id(manager_chat_id)

    if not manager:
        await callback.answer("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    confirmation_text = f"""
‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞?
üë§ –ò–º—è: {manager.nickname}
üÜî Chat ID: {manager.chat_id}
üìÖ –í –∫–æ–º–∞–Ω–¥–µ —Å: {manager.created_at.strftime("%d.%m.%Y %H:%M")}

–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.
    """

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{manager.chat_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="manage_managers"),
            ]
        ]
    )

    await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
    await callback.answer()


@manager_router.callback_query(F.data.startswith("confirm_remove_"))
async def remove_manager_execute(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    if not is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    manager_chat_id = int(callback.data.split("_")[2])
    manager = await db.get_manager_by_chat_id(manager_chat_id)

    if not manager:
        await callback.answer("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        success = await db.remove_manager(manager_chat_id)

        if success:
            await callback.message.edit_text(
                f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {manager.nickname} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=get_admin_keyboard()
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            try:
                manager_bot = Bot(token=config.MANAGER_BOT_TOKEN)
                await manager_bot.send_message(
                    chat_id=manager_chat_id, text="‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω."
                )
                await manager_bot.session.close()
            except Exception as e:
                logger.warning(f"Could not notify removed manager: {e}")

        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=get_admin_keyboard())

    except Exception as e:
        logger.error(f"Error removing manager: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=get_admin_keyboard())

    await callback.answer()


@manager_router.message(F.text)
async def handle_manager_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    if not await db.is_manager(message.chat.id) and not is_admin(message.chat.id):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
    current_state = await state.get_state()
    if current_state == ManagerStates.waiting_for_ticket_answer:
        data = await state.get_data()
        ticket_id = data.get("ticket_id")

        try:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–∏–∫–µ—Ç
            ticket = await db.answer_ticket(ticket_id=ticket_id, answer=message.text, manager_chat_id=message.chat.id)

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!", reply_markup=get_main_keyboard())

        except Exception as e:
            logger.error(f"Error answering ticket: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")


@manager_router.callback_query(F.data.startswith("answer_"))
async def start_answer(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç."""
    if not await db.is_manager(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    ticket_id = int(callback.data.split("_")[1])
    await state.set_state(ManagerStates.waiting_for_ticket_answer)
    await state.update_data(ticket_id=ticket_id)

    ticket = await db.get_ticket_by_id(ticket_id)
    if not ticket:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}:\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {ticket.client_nickname}\n"
        f"–í–æ–ø—Ä–æ—Å: {ticket.question[:200]}..."
    )
    await callback.answer()


@manager_router.callback_query(F.data.startswith("close_"))
async def close_ticket(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞."""
    if not await db.is_manager(callback.message.chat.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    ticket_id = int(callback.data.split("_")[1])

    try:
        ticket = await db.answer_ticket(
            ticket_id=ticket_id, answer="–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", manager_chat_id=callback.message.chat.id
        )

        await callback.message.edit_text(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", reply_markup=None)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error closing ticket: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞")


@manager_router.callback_query(F.data == "show_help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    help_text = """
üÜò –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

üé´ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç–æ–≤
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üìù –ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç:
1. –ù–∞–∂–º–∏—Ç–µ "üé´ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "üìù –û—Ç–≤–µ—Ç–∏—Ç—å" 
3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
4. –û—Ç–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ n8n

‚ùå –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ - –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É

üö® –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö!
    """
    await callback.message.edit_text(help_text, reply_markup=get_main_keyboard())
    await callback.answer()


async def run_manager_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await notification_manager.initialize()

    bot = Bot(token=config.MANAGER_BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(manager_router)

    await dp.start_polling(bot)
