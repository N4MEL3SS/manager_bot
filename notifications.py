import asyncio
import logging
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from config import config
from datetime import datetime, timedelta
import pytz


logger = logging.getLogger(__name__)


class NotificationManager:
    def __init__(self):
        self.bot = None
        self.last_notification_time = {}
        self.cooldown = timedelta(seconds=config.NOTIFICATION_COOLDOWN)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.bot = Bot(token=config.MANAGER_BOT_TOKEN)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞"""
        if self.bot:
            await self.bot.session.close()
    
    def can_send_notification(self, manager_chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∞–Ω—Ç–∏-—Å–ø–∞–º)"""
        now = datetime.now(pytz.timezone(config.TIMEZONE))
        last_time = self.last_notification_time.get(manager_chat_id)
        
        if not last_time:
            return True
        
        return (now - last_time) >= self.cooldown
    
    def update_notification_time(self, manager_chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.last_notification_time[manager_chat_id] = datetime.now(pytz.timezone(config.TIMEZONE))
    
    async def notify_new_ticket(self, ticket):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ"""
        if not config.NOTIFY_MANAGERS_NEW_TICKETS:
            return
        
        if not self.bot:
            await self.initialize()
        
        try:
            managers = await db.get_managers_for_notifications()
            
            if not managers:
                logger.warning("No active managers found for notifications")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            tickets_stats = await db.get_tickets_count()
            notification_text = await self._format_new_ticket_notification(ticket, tickets_stats)
            keyboard = self._create_ticket_notification_keyboard(ticket.id)
            
            successful_notifications = 0
            
            for manager in managers:
                if self.can_send_notification(manager.chat_id):
                    try:
                        await self.bot.send_message(
                            chat_id=manager.chat_id,
                            text=notification_text,
                            reply_markup=keyboard,
                            disable_notification=False  # –í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤—É–∫
                        )
                        self.update_notification_time(manager.chat_id)
                        successful_notifications += 1
                        logger.info(f"New ticket notification sent to manager {manager.nickname}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        logger.error(f"Failed to send notification to manager {manager.chat_id}: {e}")
                        # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –º–æ–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
                        # await db.remove_manager(manager.chat_id)
            
            logger.info(f"New ticket notifications sent: {successful_notifications}/{len(managers)}")
            
        except Exception as e:
            logger.error(f"Error in notify_new_ticket: {e}")
    
    async def notify_ticket_answered(self, ticket, answering_manager_chat_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ —Ç–æ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É"""
        if not self.bot:
            await self.initialize()
        
        try:
            managers = await db.get_managers_for_notifications()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–∏–∫–µ—Ç
            other_managers = [m for m in managers if m.chat_id != answering_manager_chat_id]
            
            if not other_managers:
                return
            
            answering_manager = await db.get_manager_by_chat_id(answering_manager_chat_id)
            manager_name = answering_manager.nickname if answering_manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
            
            notification_text = f"""
üìã –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É

üÜî –¢–∏–∫–µ—Ç: #{ticket.id}
üë§ –ö–ª–∏–µ–Ω—Ç: @{ticket.client_nickname}
üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}
‚è∞ –í—Ä–µ–º—è: {datetime.now(pytz.timezone(config.TIMEZONE)).strftime('%H:%M %d.%m.%Y')}

–¢–∏–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.
            """
            
            for manager in other_managers:
                try:
                    await self.bot.send_message(
                        chat_id=manager.chat_id,
                        text=notification_text,
                        disable_notification=True  # –¢–∏—Ö–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    )
                except Exception as e:
                    logger.error(f"Failed to send ticket answered notification to manager {manager.chat_id}: {e}")
        
        except Exception as e:
            logger.error(f"Error in notify_ticket_answered: {e}")
    
    async def notify_daily_stats(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        if not self.bot:
            await self.initialize()
        
        try:
            managers = await db.get_managers_for_notifications()
            tickets_stats = await db.get_tickets_count()
            
            stats_text = self._format_daily_stats(tickets_stats)
            
            for manager in managers:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    personal_stats = await db.get_manager_stats(manager.chat_id)
                    
                    personal_text = f"\nüë§ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    personal_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: {personal_stats['total_answered']}\n"
                    if personal_stats['last_activity']:
                        personal_text += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {personal_stats['last_activity'].strftime('%H:%M %d.%m.%Y')}\n"
                    else:
                        personal_text += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                    
                    full_text = stats_text + personal_text
                    
                    await self.bot.send_message(
                        chat_id=manager.chat_id,
                        text=full_text,
                        disable_notification=True
                    )
                    
                except Exception as e:
                    logger.error(f"Failed to send daily stats to manager {manager.chat_id}: {e}")
        
        except Exception as e:
            logger.error(f"Error in notify_daily_stats: {e}")
    
    async def _format_new_ticket_notification(self, ticket, tickets_stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ"""
        return f"""
üö® –ù–û–í–´–ô –¢–ò–ö–ï–¢

üÜî –ù–æ–º–µ—Ä: #{ticket.id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.client_nickname}
‚è∞ –í—Ä–µ–º—è: {ticket.created_at.strftime('%H:%M %d.%m.%Y')}
‚ùì –í–æ–ø—Ä–æ—Å:
{ticket.question[:300]}{'...' if len(ticket.question) > 300 else ''}

üìä –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {tickets_stats['pending']}
        """
    
    def _create_ticket_notification_keyboard(self, ticket_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç", callback_data=f"answer_{ticket_id}")],
                [InlineKeyboardButton(text="üé´ –í—Å–µ —Ç–∏–∫–µ—Ç—ã", callback_data="show_tickets")]
            ]
        )
    
    def _format_daily_stats(self, tickets_stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return f"""
üìä –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   ‚Ä¢ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {tickets_stats['total']}
   ‚Ä¢ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö: {tickets_stats['pending']}
   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö: {tickets_stats['answered']}

‚è∞ –í—Ä–µ–º—è: {datetime.now(pytz.timezone(config.TIMEZONE)).strftime('%H:%M %d.%m.%Y')}
        """

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()