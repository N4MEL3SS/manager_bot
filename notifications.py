import asyncio
from datetime import datetime, timedelta
import logging

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import pytz

from database import db

from config import config


logger = logging.getLogger(__name__)


class NotificationManager:
    def __init__(self):
        self.bot = None
        self.last_notification_time = {}
        self.cooldown = timedelta(seconds=config.NOTIFICATION_COOLDOWN)

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.bot = Bot(token=config.MANAGER_BOT_TOKEN)

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞."""
        if self.bot:
            await self.bot.session.close()

    def can_send_notification(self, manager_chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∞–Ω—Ç–∏-—Å–ø–∞–º)."""
        now = datetime.now(pytz.timezone(config.TIMEZONE))
        last_time = self.last_notification_time.get(manager_chat_id)

        if not last_time:
            return True

        return (now - last_time) >= self.cooldown

    def update_notification_time(self, manager_chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        self.last_notification_time[manager_chat_id] = datetime.now(pytz.timezone(config.TIMEZONE))

    async def notify_new_ticket(self, ticket):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ."""
        if not config.NOTIFY_MANAGERS_NEW_TICKETS:
            return

        if not self.bot:
            await self.initialize()

        try:
            managers = await db.get_managers_for_notifications()

            if not managers:
                logger.warning("No active managers found for notifications")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            tickets_stats = await db.get_tickets_count()
            notification_text = await self._format_new_ticket_notification(ticket, tickets_stats)
            keyboard = self._create_ticket_notification_keyboard(ticket.id)

            successful_notifications = 0

            for manager in managers:
                if self.can_send_notification(manager.chat_id):
                    try:
                        await self.bot.send_message(
                            chat_id=manager.chat_id,
                            text=notification_text,
                            reply_markup=keyboard,
                            disable_notification=False,
                        )
                        self.update_notification_time(manager.chat_id)
                        successful_notifications += 1
                        logger.info(f"New ticket notification sent to manager {manager.nickname}")

                        await asyncio.sleep(0.1)

                    except Exception as e:
                        logger.error(f"Failed to send notification to manager {manager.chat_id}: {e}")

            logger.info(f"New ticket notifications sent: {successful_notifications}/{len(managers)}")

        except Exception as e:
            logger.error(f"Error in notify_new_ticket: {e}")

    async def _format_new_ticket_notification(self, ticket, tickets_stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ."""
        return f"""
üö® –ù–û–í–´–ô –¢–ò–ö–ï–¢ –û–¢ –ö–õ–ò–ï–ù–¢–ê

üÜî –ù–æ–º–µ—Ä: #{ticket.id}
üë§ –ö–ª–∏–µ–Ω—Ç: {ticket.client_nickname}
üí¨ –í–æ–ø—Ä–æ—Å:
{ticket.question[:400]}{"..." if len(ticket.question) > 400 else ""}

‚è∞ –í—Ä–µ–º—è: {ticket.created_at.strftime("%H:%M %d.%m.%Y")}
üìä –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {tickets_stats["pending"]} —Ç–∏–∫–µ—Ç–æ–≤
        """

    def _create_ticket_notification_keyboard(self, ticket_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ."""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç", callback_data=f"answer_{ticket_id}")],
                [InlineKeyboardButton(text="üé´ –í—Å–µ —Ç–∏–∫–µ—Ç—ã", callback_data="show_tickets")],
            ]
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()
